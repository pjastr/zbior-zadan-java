# Pojęcie klasy/obiektu

1.  Utwórz klasę `Dog` z polami: `name`, `breed` i `age`. Napisz metodę `bark()`, która wydrukuje na konsoli `"Wow Wow"`. Stwórz przypadek testowy, aby wywołać metodę co najmniej jeden raz.

2.  Stwórz klasę `Car` z polami: `brand`, `model` i `speed`. Napisz metody `accelerate(int value)` i `decelerate(int value)`, które odpowiednio zwiększają i zmniejszają prędkość o podaną wartość. Stwórz przypadek testowy, aby wywołać każdą metodę co najmniej jeden raz.

3.  Stwórz klasę `BankAccount` z polem `balance`. Napisz metody `deposit(double amount)` i `withdraw(double amount)`, które odpowiednio zwiększają i zmniejszają saldo o daną kwotę. Stwórz przypadek testowy, aby wywołać każdą metodę co najmniej jeden raz.

4.  Utwórz klasę `Point` z dwoma polami: `x` i `y` reprezentującymi współrzędne na płaszczyźnie. Napisz metodę `distance(Point otherPoint)`, która oblicza odległość między bieżącym punktem a innym punktem. Stwórz przypadek testowy, aby wywołać metodę co najmniej jeden raz.

5.  Stwórz klasę `Time` z polami: `hours` i `minutes`. Napisz metodę `addTime(Time otherTime)`, która dodaje do bieżącego czasu czas podany jako argument i zwraca nowy obiekt klasy Time. Zadbaj o to, aby minuty i godziny nie przekraczały odpowiednio 59 i 23. Stwórz przypadek testowy, aby wywołać metodę co najmniej jeden raz.

6.  Wykonaj po kolei dwa podpunkty:

    A. Stwórz klasę `Car` zawierającą publiczne pole `brand`. W klasie `Main`, utwórz obiekt klasy `Car`, przypisz mu wartość `null` i spróbuj odwołać się do pola `brand`. Jaki jest wynik?

    B. Zmodyfikuj kod z podpunktu A tak, aby sprawdzić, czy obiekt `Car` jest `null` przed odwołaniem się do pola `brand`. Jaki jest wynik?

7.  Utwórz klasę `Person` zawierającą pole `name`. W klasie `Main`, utwórz dwa obiekty klasy `Person` - `person1` i `person2` - oba odnoszące się do tego samego obiektu. Zmień wartość pola `name` przez `person1` i wydrukuj wartość pola `name` przez `person2`. Przeanalizuj wynik.

8.  Stwórz tablicę obiektów klasy `Car` (klasa zawiera publiczne pole `brand`). Następnie spróbuj odwołać się do pola `brand` jednego z obiektów w tablicy, nie inicjalizując wcześniej tablicy obiektami `Car`. Przeanalizuj wynik.

9.  Stwórz listę tablicową (ArrayList) obiektów klasy `Person` (klasa zawiera publiczne pole `name`). Następnie spróbuj odwołać się do pola `name` jednego z obiektów na liście, nie dodając wcześniej do listy żadnych obiektów `Person`. Przeanalizuj wynik.

10. Utwórz klasę `Pies` z metodą `szczekaj`, która wydrukuje wiadomość "Hau! Hau!". W klasie `Main` utwórz obiekt `Pies`, przypisz mu wartość `null` i spróbuj wywołać metodę `szczekaj`. Przeanalizuj wynik.

11. Stwórz klasę `Kot` z polem `imie`. Dodaj do klasy `Kot` metodę `stworzKota`, która zwraca nowy obiekt klasy `Kot`. Metoda powinna ustawiać pole `imie` na podaną wartość, ale tylko jeśli wartość nie jest `null`. W przeciwnym razie powinna zwracać `null`. W klasie `Main` użyj metody `stworzKota` do stworzenia obiektu `kot`, a następnie spróbuj wydrukować wartość pola `imie`. Co się stanie, jeśli przekażesz `null` jako argument do metody `stworzKota`? Przeanalizuj wynik.

12. Wykonaj kolejno poniższe czynności:

    A.  Stwórz klasę `Czlowiek` z polem `imie`. Dodaj do klasy metodę `przedstawSie`, która wyświetli wiadomość "Cześć, jestem" i imię osoby. W klasie `Main`, utwórz obiekt `Czlowiek` i wywołaj na nim metodę `przedstawSie`. Czy musisz użyć słowo kluczowe `this` w implementacji metody?

    B.  Dodaj do klasy `Czlowiek` metodę `powiedzCzesc`, która jako argument przyjmuje inny obiekt klasy `Czlowiek` i wyświetla wiadomość "Cześć," i imię drugiego człowieka. Przeanalizuj działanie.

    C.  Dodaj do klasy `Czlowiek` metodę `zmienImie`, która jako argument przyjmuje łańcuch znaków i przypisuje go do pola `imie`. Utwórz obiekt `Czlowiek` i użyj metody `zmienImie` do zmiany jego imienia. Następnie wywołaj metodę `przedstawSie`. Czy imię zostało zmienione? Czy musisz użyć słowo kluczowe `this` w implementacji metody?

    D.  Dodaj do klasy `Czlowiek` metodę `zamienImionami`, która jako argument przyjmuje inny obiekt klasy `Czlowiek` i zamienia imionami obie osoby. Utwórz dwa obiekty `Czlowiek` i użyj metody `zamienImionami` do zamiany ich imion. Następnie wywołaj metodę `przedstawSie` na obu obiektach. Czy imiona zostały zamienione?

13. Wykonaj kolejno poniższe czynności:

    A.  Stwórz klasę `Licznik` z jednym polem `liczba`. Dodaj do klasy metodę `zwieksz`, która przyjmuje parametr typu int i zwiększa wartość pola `liczba` o wartość tego parametru. W klasie `Main`, utwórz zmienną typu int, przekaż ją do metody `zwieksz` i sprawdź, czy wartość zmiennej zmieniła się po wywołaniu metody.

    B.  Dodaj do klasy `Licznik` metodę `dodaj`, która przyjmuje inny obiekt `Licznik` i dodaje wartość jego pola `liczba` do pola `liczba` bieżącego obiektu. Utwórz dwa obiekty `Licznik` w klasie `Main` i użyj metody `dodaj`. Sprawdź, czy obiekt przekazany jako argument metody `dodaj` zmienił swoją wartość po wywołaniu metody.

    C.  Stwórz klasę `Zmieniacz`, która posiada metodę `zmienWartosc`, która jako argument przyjmuje typ int. Wewnątrz metody zmień wartość argumentu na inną. W klasie `Main` utwórz zmienną int, a następnie przekaż ją do metody `zmienWartosc` i sprawdź, czy wartość zmiennej się zmieniła.

    D.  Dodaj do klasy `Zmieniacz` metodę `zmienObiekt`, która jako argument przyjmuje obiekt `Licznik`. Wewnątrz metody zmień wartość pola `liczba` obiektu `Licznik` na inną. W klasie `Main` utwórz obiekt `Licznik`, a następnie przekaż go do metody `zmienObiekt` i sprawdź, czy wartość pola `liczba` obiektu się zmieniła.

14. Zdefiniuj klasę `Punkt`, która reprezentuje punkt w przestrzeni 3D (o współrzędnych `x`, `y` i `z`). Klasa powinna mieć metody do zmiany wartości współrzędnych. W `Main` stwórz dwa obiekty tej klasy i przetestuj różnicę pomiędzy przekazywaniem parametrów przez wartość i przez referencję.
