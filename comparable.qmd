# Interfejs `Comparable`

1. Napisz klasę `Student`, która zawiera pola: `imie` (typu `String`), `sredniaOcen` (typu `double`) i `rokUrodzenia` (typu `int`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Student` były sortowane malejąco według średniej ocen. Stwórz listę 5 obiektów klasy `Student` i posortuj ją według sprecyzowanego kryterium.

2. Napisz klasę `Pracownik`, która zawiera pola: `imie` (typu `String`), `pensja` (typu `double`) i `dataZatrudnienia` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Pracownik` były sortowane rosnąco według pensji. Stwórz listę 5 obiektów klasy `Pracownik` i posortuj ją według sprecyzowanego kryterium.

3. Napisz klasę `Klient`, która zawiera pola: `imie` (typu `String`), `nrKlienta` (typu `int`) i `ostatnieLogowanie` (typu `Date`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Klient` były sortowane malejąco według daty ostatniego logowania. Stwórz listę 5 obiektów klasy `Klient` i posortuj ją według sprecyzowanego kryterium.

4. Napisz klasę `Produkt`, która zawiera pola: `nazwa` (typu `String`), `cena` (typu `double`) i `dataProdukcji` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Produkt` były sortowane rosnąco według daty produkcji. Stwórz listę 5 obiektów klasy `Produkt` i posortuj ją według sprecyzowanego kryterium.

5. Napisz klasę `Osoba`, która zawiera pola: `imie` (typu `String`), `wzrost` (typu `int`) i `dataUrodzenia` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Osoba` były sortowane malejąco według wzrostu. Stwórz listę 5 obiektów klasy `Osoba` i posortuj ją według sprecyzowanego kryterium.

6. Napisz klasę `Ksiazka`, która zawiera pola: `tytul` (typu `String`), `liczbaStron` (typu `int`) i `dataWydania` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Ksiazka` były sortowane malejąco według liczby stron. Stwórz tablicę 4 obiektów klasy `Ksiazka` i posortuj ją według sprecyzowanego kryterium.

7. Napisz klasę `Samochod`, która zawiera pola: `marka` (typu `String`), `przebieg` (typu `int`) i `rokProdukcji` (typu `int`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Samochod` były sortowane rosnąco według przebiegu. Stwórz tablicę 4 obiektów klasy `Samochod` i posortuj ją według sprecyzowanego kryterium.

8. Napisz klasę `ProduktSpozywczy`, która zawiera pola: `nazwa` (typu `String`), `cena` (typu `double`) i `dataWaznosci` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `ProduktSpozywczy` były sortowane rosnąco według daty ważności. Stwórz tablicę 4 obiektów klasy `ProduktSpozywczy` i posortuj ją według sprecyzowanego kryterium.

9. Napisz klasę `Muzyka`, która zawiera pola: `tytul` (typu `String`), `artysta` (typu `String`) i `rokWydania` (typu `int`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Muzyka` były sortowane malejąco według roku wydania. Stwórz tablicę 4 obiektów klasy `Muzyka` i posortuj ją według sprecyzowanego kryterium.

10. Napisz klasę `Przedmiot`, która zawiera pola: `nazwa` (typu `String`), `waga` (typu `double`) i `cena` (typu `double`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Przedmiot` były sortowane rosnąco według wagi. Stwórz tablicę 4 obiektów klasy `Przedmiot` i posortuj ją według sprecyzowanego kryterium.

11. Napisz klasę `Student`, która zawiera pola: `imie` (typu `String`), `sredniaOcen` (typu `double`) i `rokStudiow` (typu `int`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Student` były sortowane według jednego kryterium: malejąco według średniej ocen, a przy równości sortowane były rosnąco według roku studiów. Stwórz tablicę 4 obiektów klasy `Student` i posortuj ją według sprecyzowanego kryterium.

12. Napisz klasę `Zamowienie`, która zawiera pola: `nazwaProduktu` (typu `String`), `ilosc` (typu `int`) i `cenaJednostkowa` (typu `double`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Zamowienie` były sortowane według jednego kryterium: malejąco według ceny jednostkowej, a przy równości sortowane były rosnąco według ilości. Stwórz listę tablicową 4 obiektów klasy `Zamowienie` i posortuj ją według sprecyzowanego kryterium.

13. Napisz klasę `Klient`, która zawiera pola: `imie` (typu `String`), `saldo` (typu `double`) i `ostatnieZakupy` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Klient` były sortowane według jednego kryterium: malejąco według salda, a przy równości sortowane były rosnąco według daty ostatnich zakupów. Stwórz listę tablicową 4 obiektów klasy `Klient` i posortuj ją według sprecyzowanego kryterium.

14. Napisz klasę `Kurs`, która zawiera pola: `nazwa` (typu `String`), `liczbaGodzin` (typu `int`) i `cena` (typu `double`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Kurs` były sortowane według jednego kryterium: rosnąco według liczby godzin, a przy równości sortowane były malejąco według ceny. Stwórz tablicę 4 obiektów klasy `Kurs` i posortuj ją według sprecyzowanego kryterium.

15. Napisz klasę `Produkt`, która zawiera pola: `nazwa` (typu `String`), `cena` (typu `double`) i `dataWaznosci` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Produkt` były sortowane według jednego kryterium: malejąco według daty ważności, a przy równości sortowane były rosnąco według ceny. Stwórz listę obiektów klasy `Produkt` i posortuj ją według sprecyzowanego kryterium. Następnie wyświetl posortowaną listę na ekranie.

16. Napisz klasę `Samochód`, która zawiera pola: `marka` (typu `String`), `model` (typu `String`) i `numerRejestracyjny` (typu `String`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Samochód` były sortowane według jednego kryterium: rosnąco według długości numeru rejestracyjnego. Stwórz tablicę 4 obiektów klasy `Samochód` i posortuj ją według sprecyzowanego kryterium.

17. Napisz klasę `Pracownik`, która zawiera pola: `imie` (typu `String`), `nazwisko` (typu `String`) i `stanowisko` (typu `String`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Pracownik` były sortowane według jednego kryterium: rosnąco według długości nazwiska. Stwórz listę tablicową 4 obiektów klasy `Pracownik` i posortuj ją według sprecyzowanego kryterium.

18. Napisz klasę `Film`, która zawiera pola: `tytuł` (typu `String`), `reżyser` (typu `String`) i `gatunek` (typu `String`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Film` były sortowane według jednego kryterium: rosnąco według długości tytułu. Stwórz listę tablicową 4 obiektów klasy `Film` i posortuj ją według sprecyzowanego kryterium.

19. Napisz klasę `Książka`, która zawiera pola: `tytuł` (typu `String`), `autor` (typu `String`) i `dataWydania` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Książka` były sortowane według jednego niestandardowego kryterium: rosnąco według roku wydania. Stwórz tablicę 4 obiektów klasy `Książka` i posortuj ją według sprecyzowanego kryterium.

20. Napisz klasę `Produkt`, która zawiera pola: `nazwa` (typu `String`), `cena` (typu `double`) i `dataProdukcji` (typu `LocalDate`). Zaimplementuj interfejs `Comparable` w taki sposób, aby obiekty klasy `Produkt` były sortowane według jednego niestandardowego kryterium: malejąco według roku produkcji. Stwórz listę tablicową 4 obiektów klasy `Produkt` i posortuj ją według sprecyzowanego kryterium.

21. Zdefiniuj klasę Klient, która będzie implementować generyczny interfejs Comparable. W klasie tej zadeklaruj prywatne pola nazwisko typu String oraz saldo typu double. Implementując metodę compareTo interfejsu Comparable, porównuj klientów na podstawie ich salda, a w przypadku takiego samego salda - na podstawie nazwiska. Następnie zdefiniuj klasę Firma dziedziczącą po klasie Klient. Klasa Firma ma dodatkowo posiadać prywatne pole liczbaPracowników typu int. Implementując metodę compareTo interfejsu Comparable w klasie Firma, skorzystaj z metody compareTo zdefiniowanej w klasie Klient oraz, w razie potrzeby, uwzględnij pole liczbaPracowników. Napisz program TestKlient, w którym utwórz listę 5 klientów i firm o nazwie listaKlientów posługując się klasą ArrayList. W składzie listy powinny wystąpić przynajmniej dwóch klientów o takim samym saldzie i różnym nazwisku oraz dwie firmy o takiej samej liczbie pracowników i różnym saldzie. Wyświetl zawartość listy listaKlientów, posortuj ją za pomocą instancyjnej metody sort z klasy ArrayList i ponownie wyświetl zawartość tej listy.

22. Zdefiniuj klasę Zwierzę, która będzie implementować generyczny interfejs Comparable. W klasie tej zadeklaruj prywatne pola gatunek typu String oraz wiek typu int. Implementując metodę compareTo interfejsu Comparable, porównuj zwierzęta na podstawie ich wieku, a w przypadku takiego samego wieku - na podstawie gatunku. Następnie zdefiniuj klasę Pies dziedziczącą po klasie Zwierzę. Klasa Pies ma dodatkowo posiadać prywatne pole rasa typu String. Implementując metodę compareTo interfejsu Comparable w klasie Pies, skorzystaj z metody compareTo zdefiniowanej w klasie Zwierzę oraz, w razie potrzeby, uwzględnij pole rasa. Napisz program TestZwierzę, w którym utwórz listę 5 zwierząt i psów o nazwie listaZwierząt posługując się klasą ArrayList. W składzie listy powinny wystąpić przynajmniej
